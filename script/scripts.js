var data_source;
var demo_val = $('#demo_select').val();
var lines = "";
var stops = "";
var stops_catch = "";
var pair_lines = "";
var pair_stops = "";
var pair_stops_catch = "";
var active_route = "";
var pair_active_route = ""
var m = L.map('map').setView([33.7807712, -84.4285066], 9);
var info = L.control();
var legend = L.control({position: 'bottomright'});
var grades = "";
var demo = "";
var dot_map = "";
var pair_layers = L.layerGroup({onEachFeature: onEachPair});
var pair_list = [];
var has_routes = 0;
// choropleth grades and labels
var grades_dict = {
    "theil_T": [null, -0.0000015976, -0.0000008184, -0.0000001008, 0.0000010912, 0.0000032648, 0.0000074440, 0.0000603631],
    "median_inc": [null, 34018.86, 43871.86, 54229.29, 65186.43, 78525.86, 102263.43, 250001.00],
    "pc_white": [null, .14, .29, .43, .57, .71, .86, 1],
    "pc_black": [null, .14, .29, .43, .57, .71, .86, 1],
    "pc_am_in": [null, .14, .29, .43, .57, .71, .86, 1],
    "pc_n_HI": [null, .14, .29, .43, .57, .71, .86, 1],
    "pc_asian": [null, .14, .29, .43, .57, .71, .86, 1],
    "pc_other": [null, .14, .29, .43, .57, .71, .86, 1],
    "pc_2_o_more": [null, .14, .29, .43, .57, .71, .86, 1],
    "pc_latino": [null, .14, .29, .43, .57, .71, .86, 1],
    "pc_vulnerable": [null, .02, .06, .12, .20, .31, .46, .74]
};

var grades = grades_dict[demo_val];

var labels_dict = {
    "theil_T": ['No Data', '-1.6E-6 to -8.2E-7', '-8.2E-7 to -1.0E-7', '-1.0E-7 to 1.1E-6', '1.1E-6 to 3.2E-6', '3.2E-6 to 7.4E-6', '7.4E-6 to 6.0E-5', '6.0E-5 or greater'],
    "median_inc": ['No Data', 'under 34k', '34k to 44k', '44k to 54k', '54k to 65k', '65k to 78k', '78k to 102k', '102k to 250k'],
    "pc_white": ['No Data', '0-14%', '14-29%','29-43%','43-57%', '57-71%', '71-86%', 'Above 86%' ],
    "pc_black": ['No Data', '0-14%', '14-29%','29-43%','43-57%', '57-71%', '71-86%', 'Above 86%' ],
    "pc_am_in": ['No Data', '0-14%', '14-29%','29-43%','43-57%', '57-71%', '71-86%', 'Above 86%' ],
    "pc_n_HI": ['No Data', '0-14%', '14-29%','29-43%','43-57%', '57-71%', '71-86%', 'Above 86%' ],
    "pc_asian": ['No Data', '0-14%', '14-29%','29-43%','43-57%', '57-71%', '71-86%', 'Above 86%' ],
    "pc_other": ['No Data', '0-14%', '14-29%','29-43%','43-57%', '57-71%', '71-86%', 'Above 86%' ],
    "pc_2_o_more": ['No Data', '0-14%', '14-29%','29-43%','43-57%', '57-71%', '71-86%', 'Above 86%' ],
    "pc_latino": ['No Data', '0-14%', '14-29%','29-43%','43-57%', '57-71%', '71-86%', 'Above 86%' ],
    "pc_vulnerable": ['No Data', '0-2%', '2-6%','6-12%','12-20%', '20-31%', '31-46%', '46-74%' ]
};
var labels = labels_dict[demo_val];

// style
var geojsonMarkerOptions = {
    radius: 6,
    fillColor: "#F2FE3F",
    color: "#000",
    weight: 1,
    opacity:1,
    fillOpacity: 0.7
};

var pair_geojsonMarkerOptions = {
    radius: 6,
    fillColor: "#3FFEEB",
    color: "#000",
    weight: 1,
    opacity:1,
    fillOpacity: 0.7
};

var mapbox_tiles = L.tileLayer(
  'https://api.mapbox.com/styles/v1/dhalpern/cjosz5zwq12c12so7f4j0f6fk/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZGhhbHBlcm4iLCJhIjoiY2pvMnliandsMHJsbTNwcGhlNWhqYzF3ZyJ9.g5FiNV9s5DXPt1RaE2wNyg', {
    tileSize: 512,
    zoomOffset: -1,
    attribution: '© <a href="https://www.mapbox.com/map-feedback/">Mapbox</a> © <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> Sources: ACS 2016, 2010, US Decennial Census 2000, 1990 | Geometry: US Census Tiger, US NHGIS'
});
var dot_map = L.tileLayer(
  'http://www.doubleup.wrong.website/images/tiles/{z}/{x}/{y}.png', {
    tileSize: 256,
    attribution: 'Generated by QTiles'
});

function get_color(d) {

    return d === null ? 'rgba(0,0,0,1)':
           d > grades[6] ? 'rgba(122,1,119,1)' :
           d > grades[5]  ? 'rgba(174,1,126,1)':
           d > grades[4]  ? 'rgba(221,52,151,1)':
           d > grades[3]  ? 'rgba(247,104,161,1)':
           d > grades[2]   ? 'rgba(250,159,181,1)':
           d > grades[1]   ? 'rgba(252,197,192,1)':
           d > grades[0]   ? 'rgba(253,224,221,1)':
                            'rgba(255,247,243,1)';
}

function style(feature) {
    return {
        weight: 0.5,
        color:"black",
        fillOpacity: 1,
        fillColor:demo_slice(feature, demo_val),
        className:'demo-map'
    };
}

function stop_catch_style(feature) {
    return {
        weight: 0,
        color:"black",
        fillOpacity: 0.2,
        fillColor: "#F2FE3F",
        className: "stop_catch"
    };
}
function pair_catch_style(feature) {
    return {
        weight: 0,
        color:"black",
        fillOpacity: 0.2,
        fillColor: "#3FFEEB",
        className: "pair_catch"
    };
}

// data set selector
function get_date(d) {
    return d === "3" ? atl_data2016:
           d === "2" ? atl_data2010:
           d === "1" ? atl_data2000:
           d === "0" ? atl_data1990:
                             'null';
}

// demography property selector: to do revise parent function
function demo_slice(f, d) {
    return d === "median_inc" ? get_color(f.properties.median_inc):
           d === "pc_white" ? get_color(f.properties.pc_white):
           d === "pc_black" ? get_color(f.properties.pc_black):
           d === "pc_am_in" ? get_color(f.properties.pc_am_in):
           d === "pc_n_HI" ? get_color(f.properties.pc_n_HI):
           d === "pc_asian" ? get_color(f.properties.pc_asian):
           d === "pc_other" ? get_color(f.properties.pc_other):
           d === "pc_2_o_more" ? get_color(f.properties.pc_2_o_more):
           d === "theil_T" ? get_color(f.properties.theil_T):
           d === "pc_latino" ? get_color(f.properties.pc_latino):
           d === "pc_vulnerable" ? get_color(f.properties.pc_vulnerable):
                             'null';
}

// info hover selector
function info_selector(props, d) {
    return d === "median_inc" ? '<b>Median Income in 2016 Dollars </b><br>$ ' + (props ? props.median_inc : 'Hover over a block group'):
           d === "pc_white" ? '<b>Percent White Alone</b><br>' + (props ? (props.pc_white*100).toFixed(2) + '%': 'Hover over a block group'):
           d === "pc_black" ? '<b>Percent Black Alone</b><br>' + (props ? (props.pc_black*100).toFixed(2) + '%': 'Hover over a block group'):
           d === "pc_am_in" ? '<b>Percent American Indian Alone</b><br>' + (props ? (props.pc_am_in*100).toFixed(2) + '%': 'Hover over a block group'):
           d === "pc_n_HI" ? '<b>Percent Native Hawaiian Alone</b><br>' + (props ? (props.pc_n_HI*100).toFixed(2) + '%': 'Hover over a block group'):
           d === "pc_asian" ? '<b>Percent Asian Alone</b><br>' + (props ? (props.pc_asian*100).toFixed(2) + '%': 'Hover over a block group'):
           d === "pc_other" ? '<b>Percent Other Alone</b><br>' + (props ? (props.pc_other*100).toFixed(2) + '%': 'Hover over a block group'):
           d === "pc_2_o_more" ? '<b>Percent 2 or More Races</b><br>' + (props ? (props.pc_2_o_more*100).toFixed(2) + '%': 'Hover over a block group'):
           d === "theil_T" ? '<b>Theil T Index</b><br>' + (props ? props.theil_T: 'Hover over a block group'):
           d === "pc_latino" ? '<b>Percent Latino Alone</b><br>' + (props ? (props.pc_latino*100).toFixed(2) + '%': 'Hover over a block group'):
           d === "pc_vulnerable" ? '<b>Percent Vulnerable</b><br>(Less than High School and "Poor" or "Struggling")<br>' + (props ? (props.pc_vulnerable*100).toFixed(2) + '%': 'Hover over a block group'):
                             'null';
};

function highlightFeature(e) {
    var layer = e.target;

    layer.setStyle({
        weight: 3,
        color: 'black',
        dashArray: '',
        fillOpacity: 1
    });

    info.update(layer.feature.properties);
}
function highlightLine(e) {
    var layer = e.target;

    layer.setStyle({
    });
}

function resetHighlight(e) {
    demo.resetStyle(e.target);
}
function resetHighlightLine(e) {
    lines.resetStyle(e.target);

}
function resetMap() {
  if (m.hasLayer(main_route)) {m.removeLayer(main_route);};
  if (m.hasLayer(pair_active_route)) {m.removeLayer(pair_active_route)};
  if (m.hasLayer(pair_layers)) {m.removeLayer(pair_layers)};
  if (m.hasLayer(stops_catch)) {m.removeLayer(stops_catch)};
  if (m.hasLayer(pair_stops_catch)) {m.removeLayer(pair_stops_catch)};
  pair_layers = L.layerGroup({onEachFeature: onEachPair});
  $('#checkbox_container').fadeOut();
  $('#route_check').prop('checked', true);
  $('#stop_check').prop('checked', false);
  $('#stop_catch_check').prop('checked', false);
  $('#route_catch_check').prop('checked', false);
  $('#demography').prop('checked', false);
  $('#pair_route_check').prop('checked', true);
  $('#pair_stop_check').prop('checked', false);
  $('#pair_stop_catch_check').prop('checked', false);
  $('#pair_route_catch_check').prop('checked', false);
  $('#pair_demography').prop('checked', false);
  $('#pair_checkbox_container').fadeOut();
  $('#checkbox_container').fadeOut();
  d3.select("#pie_chart_main svg").remove();
  d3.select("#pie_chart_pair svg").remove();
  base_lines.addTo(m);
  m.fitBounds(base_lines.getBounds());

}
$(document).keypress(function(e) {
    if(e.which == 13) {
        resetMap()    }
});
$('#reset-map').click(function(){
    resetMap();
});
function selectFeature(e) {
    var layer = e.target; 
    active_route = layer.feature.properties.route_id;
    pair_options = []
    m.removeLayer(base_lines);
    load_main_route();
    get_route_pairs();
}

function selectPair(e) {
    pair_geojson = (this).feature;
    pair_active_route_id = (this).feature.properties.route_id;
    pair_active_route_info = route_info.findIndex(obj => obj.route_id == pair_active_route_id);
    pair_info = route_results.findIndex(obj => obj.route_id2 == pair_active_route_id && obj.route_id == active_route);
    pair_active_route = L.geoJson.activePair(pair_geojson, {onEachFeature: function (feature, layer) {layer.bindPopup('<h3>Route '+route_info[pair_active_route_info].route_short_name+'</h1><p>Route ID: '+route_info[pair_active_route_info].route_id+'<br>Route Long Name: '+route_info[pair_active_route_info].route_long_name+'<br>Agency: '+route_info[pair_active_route_info].agency_name+'<h4>X<sup>2</sup>: '+ route_results[pair_info].chi2+'<h4>p-value: '+ route_results[pair_info].p_val+'<h4>Collinearity: '+ route_results[pair_info].collinear_index)}});
    m.removeLayer(pair_layers);
    pair_active_route.addTo(m);
    m.fitBounds(pair_active_route.getBounds());
    pair_active_route_index = route_race_2016.findIndex(obj => obj.route_id == pair_active_route_id);
    pie_chart(pie_chart_pair, pair_active_route_index);
    $('#pair_checkbox_container').fadeIn();

}
function stopDemo(e, layer) {
    $('#stop_popup').remove();
    stop_id = (this).feature.properties.stop_id;
    stop_index = stop_demo.findIndex(obj => obj.stop_id == stop_id);
    stop_coords = (this).feature.geometry.coordinates[0];
    var demo_popup = L.popup({className: 'demo_popup'});
        demo_popup.setLatLng([e.latlng.lat, e.latlng.lng]);
        demo_popup.setContent("<h3>Stop Demography</h3><br><div id='stop_popup'></div>");
        demo_popup.openOn(m);
    stop_pie(stop_index);
}

function onEachFeature(feature, layer) {
    layer.on({
        mouseover: highlightFeature,
        mouseout: resetHighlight
    });
     info.update();
}
function onEachLine(feature, layer) {
    layer.on({
      click: selectFeature
    });
}
function onEachPair(feature, layer) {
    layer.on({
      click: selectPair
    });
}
function onEachStop(feature, layer) {
    layer.on({
      click: stopDemo
    });
}
// for dynamic changes
function update_map(){
  m.removeLayer(demo);
  m.removeLayer(dot_map);
  m.removeControl(legend);
  m.removeControl(info);
  data_source = get_date($('#time-range').val());
  demo_val = $('#demo_select').val();

  if (demo_val == "dot_map") {

    dot_map.addTo(m)
    $('#range-container').fadeOut()
    $('#dot_legend').fadeIn();

  } else {
    $('#range-container').fadeIn();
    $('#dot_legend').fadeOut();
    grades = grades_dict[demo_val];
    labels = labels_dict[demo_val];
    legend.addTo(m);
    info.addTo(m);

    demo = L.geoJson(data_source, {style: style, onEachFeature: onEachFeature})

    demo.addTo(m);
    demo.bringToBack(); }
  
}
// for initial load
function load_map(){
  data_source = get_date($('#time-range').val());
  demo_val = $('#demo_select').val();

  $("#basemapslider").slider({
      animate: true,
      value: 1,
      orientation: "horizontal",
      min: 0,
      max: 1,
      step: 0.1,
      slide: function (event, ui) {
          if (m.hasLayer(dot_map)) { dot_map.setOpacity(ui.value); }
            else { $('.demo-map').css( "opacity", ui.value ); }
      }
 });

  if (demo_val == "dot_map") {

    dot_map.addTo(m);
    $('#range-container').fadeOut();
    $('#dot_legend').fadeIn();

  } else {
    $('#range-container').fadeIn();
    $('#dot_legend').fadeOut();
    grades = grades_dict[demo_val];
    labels = labels_dict[demo_val];
    legend.addTo(m);
    info.addTo(m);

    demo = L.geoJson(data_source, {style: style, onEachFeature: onEachFeature})

    demo.addTo(m); 
  }

}


// left table call
function route_main(route){
  if (m.hasLayer(lines)) {
  m.removeLayer(lines)
  m.removeLayer(stops)
  m.removeLayer(stops_catch)
  m.removeLayer(pair_lines)
  m.removeLayer(pair_stops)
  m.removeLayer(pair_stops_catch)
  $('#route_check').prop('checked', true);
  $('#stop_check').prop('checked', false);
  $('#stop_catch_check').prop('checked', false);
  $('#route_catch_check').prop('checked', false);
  $('#demography').prop('checked', false);

  $('#pair_route_check').prop('checked', true);
  $('#pair_stop_check').prop('checked', false);
  $('#pair_stop_catch_check').prop('checked', false);
  $('#pair_route_catch_check').prop('checked', false);
  $('#pair_demography').prop('checked', false);
  active_route = ""
  acitve_route_index = ""
  $('#pair-table tr:nth-of-type(n+2)').remove();
  $('#pair_checkbox_container').fadeOut();
  $('#checkbox_container').fadeOut();
  d3.select("#pie_chart_main svg").remove();
  d3.select("#pie_chart_pair svg").remove();
  } else { 
    resolve_lines(route);

  $('#checkbox_container').fadeIn();


    $.getJSON('./data/results_race_2016.json',
      function (json) {
          var tr;
          for (var i = 0; i < json.length; i++) {
            if (json[i].route_id == active_route) {
              tr = $('<tr/>');
              tr.append("<td id='cell_pair_" + i + "' class='pair_cell'>" + '<a href="#" class="route-selector" onclick="route_pair(' + i + ')">' + json[i].route_short_name2 + "</a></td>");
              tr.append("<td class='pair_cell'>" + json[i].agency_name2 + "</td>");
              tr.append("<td class='pair_cell'>" + json[i].collinear_index + "</td>");
              tr.append("<td class='pair_cell'>" + json[i].chi2 + "</td>");
              
              $('#pair-table').append(tr);
              $('#pair-table tr:nth-of-type(n+2').addClass('pair_row');
              
          } else {  };
        }   
    })
  }

  $("#main-table td").toggleClass('no-int');
  $('#cell_'+route).toggleClass('active_cell');
}

function load_base_lines() {
  new Promise(function(resolve, reject) {
    setTimeout(() => resolve(1), 250);
        base_lines = L.geoJson.BaseStyle(route_shapes, {onEachFeature: onEachLine});
     }).then(function (result, reject) {
        base_lines.addTo(m);
        m.fitBounds(base_lines.getBounds());
     })
}   
function load_main_route() {
  new Promise(function(resolve, reject) {
    setTimeout(() => resolve(1), 250);
        active_route_index = route_race_2016.findIndex(obj => obj.route_id == active_route);
        active_route_info = route_info.findIndex(obj => obj.route_id == active_route);
        main_route = L.geoJson.mainStyle (route_shapes, { filter: function(feature) {return feature.properties.route_id == active_route;}, onEachFeature: function (feature, layer) {
    layer.bindPopup('<h3>Route '+route_info[active_route_info].route_short_name+'</h1><p>Route ID: '+route_info[active_route_info].route_id+'<br>Agency: '+route_info[active_route_info].agency_name+'</p>');
  }});
     }).then(function (result, reject) {
        main_route.addTo(m);
        m.fitBounds(main_route.getBounds());

        pie_chart(pie_chart_main, active_route_index);
        $('#checkbox_container').fadeIn();
     })
}
function load_pair_route() {
  new Promise(function(resolve, reject) {
    setTimeout(() => resolve(1), 250);
        pair_active_route_index = route_race_2016.findIndex(obj => obj.route_id == active_route);
        pair_active_route_info = route_info.findIndex(obj => obj.route_id == active_route);
        pair_route = L.geoJson(route_shapes, { filter: function(feature) {return feature.properties.route_id == pair_active_route;}, className:'route_pair', onEachFeature: function (feature, layer) {
    layer.bindPopup('<h3>Route ' + route_info[pair_active_route_info].route_short_name + '</h1><p>Route ID: '+route_info[pair_active_route_info].route_id + '<br>Agency: ' + route_info[pair_active_route_info].agency_name+'</p>');
  }});
     }).then(function (result, reject) {
        pair_route.addTo(m);
        m.fitBounds(pair_route.getBounds());
        pie_chart(pie_chart_main, pair_active_route_index);
        $('#pair_checkbox_container').fadeIn();
     })
}
function get_route_pairs() {
  new Promise(function(resolve, reject) {
    setTimeout(() => resolve(1), 250);
        $.getJSON('./data/results_race_2016.json',
           function (json) {
          for (var i = 0; i < json.length; i++) {
            if (json[i].route_id == active_route) {
              pair_route_temp = json[i].route_id2;
              add_item = pair_options.push(pair_route_temp);
          } else { };
    }   
  })
     }).then(function (result, reject) {
          for (var i = 0; i < pair_options.length; i++) {
            pair_routes = L.geoJson.passivePair(route_shapes_full[0], {filter: function(feature) {return feature.properties.route_id == pair_options[i]}, onEachFeature: onEachPair}).addTo(pair_layers);
          }
          has_routes = 1;
          pair_layers.addTo(m);
  
     })
}

$(document).ready(function () {
  load_base_lines();
});
function resolve_active_lines() {
  new Promise(function(resolve, reject) {
    setTimeout(() => resolve(1), 250);
        lines_active = L.geoJson.mainStyle(route_shapes[0], { filter: function(feature) {return feature.route_id == active_route;} });
     }).then(function (result, reject) {
        lines_active.addTo(m);
        lines_active.bringToFront();
        m.fitBounds(lines_active.getBounds());
        active_route_index = route_race_2016.findIndex(obj => obj.route_id == active_route);
        pie_chart(pie_chart_main, active_route_index);
     })
}
function resolve_lines(route) {
  new Promise(function(resolve, reject) {
    setTimeout(() => resolve(1), 250);
        $.getJSON('./data/routes.json',
        function (json) {
        active_route = json[route].route_id;
        });
        result = 0;
        return result;
    }).then(function (result, reject) {
        lines = L.geoJson.mainStyle(route_shapes[0], { filter: function(feature) {return feature.route_id == active_route;}});
     }).then(function (result, reject) {
        lines.addTo(m);
        lines.bringToFront();
        m.fitBounds(lines.getBounds());
        active_route_index = route_race_2016.findIndex(obj => obj.route_id == active_route);
        pie_chart(pie_chart_main, active_route_index);
     })
}

function resolve_pair(route) {
  new Promise(function(resolve, reject) {
    setTimeout(() => resolve(1), 250);
        $.getJSON('./data/results_race_2016.json',
        function (json) {
        pair_active_route = json[route].route_id2;
            
        });
        result = 0;
        return result;
    }).then(function (result, reject) {
        pair_lines = L.geoJson(route_shapes[0], { filter: function(feature) {return feature.route_id == pair_active_route;}, className:'route_pair'});
     }).then(function (result, reject) {
        pair_lines.addTo(m);
        pair_lines.bringToFront();
        m.fitBounds(pair_lines.getBounds());
        pair_active_route_index = route_race_2016.findIndex(obj => obj.route_id == pair_active_route);
        pie_chart(pie_chart_pair, pair_active_route_index);
     }) 
}

// right table call
function route_pair(route){
  if (m.hasLayer(pair_lines)) {
  m.removeLayer(pair_lines)
  m.removeLayer(pair_stops)
  m.removeLayer(pair_stops_catch)
  $('#pair_route_check').prop('checked', true);
  $('#pair_stop_check').prop('checked', false)
  $('#pair_stop_catch_check').prop('checked', false)
  $('#pair_route_catch_check').prop('checked', false)
  $('#pair_checkbox_container').fadeOut()
  pair_active_route = ""
  pair_active_route_index = ""
  pair_route_shape_index = ""
  d3.select("#pie_chart_pair svg").remove();
  } else { 
  pairs_on = true
  resolve_pair(route);
  
  $('#pair_checkbox_container').fadeIn();
  
  }

  $("#pair-table td").toggleClass('no-int');
  $('#cell_pair_'+route).toggleClass('active_cell');
  
};

// triggers to add/remove checkbox route accessories (catchment, stops)
function checkbox_vars(){
  // main checks

  if (!($('#route_check').prop('checked'))){
      if (m.hasLayer(main_route)){m.removeLayer(main_route)} else {}
  } else {};
  
  if ($('#stop_check').prop('checked')) {
      if (m.hasLayer(stops)){ 
      } else { 
        stops = L.geoJson(route_stops, { filter: function(feature) {return feature.route_id == active_route}}).addTo(m);
    }
  }

  if (!($('#stop_check').prop('checked'))){
      if (m.hasLayer(stops)){m.removeLayer(stops)} else {}
  } else {};

  if ($('#stop_catch_check').prop('checked')){
      if (m.hasLayer(stops_catch)){ 
      } else { 
          stops_catch = L.geoJson(route_stop_catchment, { filter: function(feature) {return feature.route_id == active_route;}, style: stop_catch_style, onEachFeature: onEachStop});
          stops_catch.addTo(m); }
  } else {};

  if (!($('#stop_catch_check').prop('checked'))){
      if (m.hasLayer(stops_catch)){m.removeLayer(stops_catch)} else {}
  } else {};

  if ($('#route_check').prop('checked')) {
      if (m.hasLayer(main_route)){
      } else {
      main_route = L.geoJson.mainStyle(route_shapes[0], { filter: function(feature) {return feature.route_id == active_route;}});
      main_route.addTo(m);
       }
  } else {};
  // pair checks
  if ($('#pair_route_check').prop('checked')) {
    if (m.hasLayer(pair_lines)){
    } else {
    pair_lines = L.geoJson.activePair(route_shapes[0], { filter: function(feature) {return feature.route_id == pair_active_route_id;}, className:'route_pair'});
    pair_lines.addTo(m);
     }
  } else {};
  if (!($('#pair_route_check').prop('checked'))){
      if (m.hasLayer(pair_lines)){m.removeLayer(pair_lines)} else {}
  } else {};
  
  if ($('#pair_stop_check').prop('checked')) {
      if (m.hasLayer(pair_stops)){ 
      } else { 
        pair_stops = L.geoJson(route_stops.features, { filter: function(feature) {return route_stops.features.route_id == pair_active_route_id}, pointToLayer: function (feature, latlng) { return L.circleMarker(latlng, pair_geojsonMarkerOptions)} 
      });
        pair_stops.addTo(m); }
  } else {};

  if (!($('#pair_stop_check').prop('checked'))){
      if (m.hasLayer(pair_stops)){m.removeLayer(pair_stops)} else {}
  } else {};

  if ($('#pair_stop_catch_check').prop('checked')){
      if (m.hasLayer(pair_stops_catch)){ 
      } else { 
          pair_stops_catch = L.geoJson(route_stop_catchment,{ filter: function(feature) {return feature.route_id == pair_active_route_id;}, style: pair_catch_style, onEachFeature: onEachStop});
          pair_stops_catch.addTo(m); }
  } else {};

  if (!($('#pair_stop_catch_check').prop('checked'))){
      if (m.hasLayer(pair_stops_catch)){m.removeLayer(pair_stops_catch)} else {}
  } else {};

  if ($('#demography').prop('checked')){
      $('#pie_chart_main').removeClass('invisible');
  } else {
    $('#pie_chart_main').addClass('invisible');
  };

  if ($('#pair_demography').prop('checked')){
      $('#pie_chart_pair').removeClass('invisible');
  } else {
    $('#pie_chart_pair').addClass('invisible');
  };

  if (($('#pair_demography').prop('checked')) || ($('#demography').prop('checked'))){
      $('#demo_overlay').removeClass('invisible');
  } else {
    $('#demo_overlay').addClass('invisible');
  };

  lines.bringToFront();
  pair_lines.bringToFront();
}


// init load
$(document).ready(function () {
    $.getJSON('./data/routes.json',
    function (json) {
        var tr;
        for (var i = 0; i < json.length; i++) {
            
            tr = $('<tr/>');
            tr.append("<td id='cell_" + i + "'>" + '<a href="#" "class="route-selector" onclick="route_main(' + i + ')">' + json[i].route_short_name + '</a><br></td>');
            tr.append("<td>" + json[i].agency_name + "</td>");
            $('#main-table').append(tr);
        }
    });
    L.control.scale().addTo(m);

});
// legend update
info.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'info output_info');
    this.update();
    return this._div;
}

info.update = function (props) {
    $('.output_info').html(info_selector(props, demo_val));     
}

legend.onAdd = function (m) {

    var div = L.DomUtil.create('div', 'info legend');
    // loop through our density intervals and generate a label with a colored square for each interval
    for (var i = 0; i < grades.length; i++) {
        div.innerHTML +=
            '<i style="background:' + get_color(grades[i]) + '"></i> ' + labels[i] + '<br>';
    }

    return div;
};

m.addLayer(mapbox_tiles);
mapbox_tiles.bringToBack();

$(document).ready( function(){
  load_map() 
});

$( "select#demo_select" ).change(function() {
  update_map()
});

$( "#time-range" ).change(function() {
  update_map()
});

$('table a').click(function(){
    $(this).fadeOut();
});

$( "#bottom-pane-button" ).click(function() {
    $("#bottom-pane-button").toggleClass('active');
    $('#bottom-pane').toggleClass('shown');
});

$('#checkbox_container input, #pair_checkbox_container input').change(function() {
    checkbox_vars();
});

function pie_title_color(d) {

    return d === pie_chart_main ? '#F2FE3F':
                                  '#3FFEEB';
};

function pie_title(d) {

    return d === pie_chart_main ? 'Main Route':
                                  'Pair Route';
};

function pie_chart(div_name, index){

var pie = new d3pie(div_name, {
  "header": {
    "title": {
      "text": pie_title(div_name),
      "fontSize": 24,
      "font": "courier",
      "color": pie_title_color(div_name),
    },
    "subtitle": {
      "color": "#999999",
      "fontSize": 10,
      "font": "courier"
    },
    "location": "pie-center",
    "titleSubtitlePadding": 10,
  },
  "footer": {
    "text": "ACS 2016 5 Year Estimates",
    "color": "#999999",
    "fontSize": 10,
    "font": "open sans",
    "location": "bottom-left"
  },
  "size": {
    "canvasWidth": 1920,
    "pieInnerRadius": "70%",
    "pieOuterRadius": "70%"
  },
  "data": {
    "sortOrder": "label-desc",
    "content": [
      {
        "label": "American Indian",
        "value": route_race_2016[index].am_indian,
        "color": "#fff800"
      },
      {
        "label": "Asian",
        "value": route_race_2016[index].asian,
        "color": "#ff8b00"
      },
      {
        "label": "African American or Black",
        "value": route_race_2016[index].black,
        "color": "#0068ff"
      },
      {
        "label": "Latinx or Hispanic",
        "value": route_race_2016[index].latino,
        "color": "#ff0025"
      },
      {
        "label": "Native Hawaiian",
        "value": route_race_2016[active_route_index].pacific,
        "color": "#9500ff"
      },
      {
        "label": "Two or More Ethnicities",
        "value": route_race_2016[index].mixed,
        "color": "#26ff00"
      },
      {
        "label": "Other Ethnicity",
        "value": route_race_2016[index].other,
        "color": "#00ffd4"
      },
      {
        "label": "White",
        "value": route_race_2016[index].white,
        "color": "#ff8fda"
      }
    ]
  },
  "labels": {
    "outer": {
      "format": "label-percentage1",
      "pieDistance": 20,
    },
    "inner": {
      "format": "none"
    },
    "mainLabel": {
      "fontSize": 12,
      "color": pie_title_color(div_name)
          },
    "percentage": {
      "color": pie_title_color(div_name),
      "fontSize": 10,
      "decimalPlaces": 0
    },
    "value": {
      "color": pie_title_color(div_name),
      "fontSize": 10
    },
    "lines": {
      "enabled": true,
      "color": pie_title_color(div_name),
    },
    "truncation": {
      "enabled": true
    }
  },
  "effects": {
    "pullOutSegmentOnClick": {
      "effect": "none",
      "speed": 400,
      "size": 8
    }
  },
  "misc": {
    "colors": {
      "segmentStroke": 'black'
    }
  }
});

};

function stop_pie(index){

var pie = new d3pie("stop_popup", {
  "size": {
    "canvasWidth": 400,
    "canvasHeight": 400,
    "pieInnerRadius": "0",
    "pieOuterRadius": "20%"
  },
  "data": {
    "sortOrder": "label-desc",
    "content": [
      {
        "label": "American Indian",
        "value": stop_demo[index].am_indian,
        "color": "#fff800"
      },
      {
        "label": "Asian",
        "value": stop_demo[index].asian,
        "color": "#ff8b00"
      },
      {
        "label": "African American or Black",
        "value": stop_demo[index].black,
        "color": "#0068ff"
      },
      {
        "label": "Latinx or Hispanic",
        "value": stop_demo[index].latino,
        "color": "#ff0025"
      },
      {
        "label": "Native Hawaiian",
        "value": stop_demo[active_route_index].pacific,
        "color": "#9500ff"
      },
      {
        "label": "Two or More Ethnicities",
        "value": stop_demo[index].mixed,
        "color": "#26ff00"
      },
      {
        "label": "Other Ethnicity",
        "value": stop_demo[index].other,
        "color": "#00ffd4"
      },
      {
        "label": "White",
        "value": stop_demo[index].white,
        "color": "#ff8fda"
      }
    ]
  },
  "labels": {
    "outer": {
      "format": "label-percentage1",
      "pieDistance": 5,
    },
    "inner": {
      "format": "none"
    },
    "mainLabel": {
      "fontSize": 10,
      "color": "black"
          },
    "percentage": {
      "color": "black",
      "fontSize": 10,
      "decimalPlaces": 0
    },
    "value": {
      "color": "black",
      "fontSize": 10
    },
    "lines": {
      "enabled": true,
      "color": "black",
    },
    "truncation": {
      "enabled": true
    }
  },
  "effects": {
    "pullOutSegmentOnClick": {
      "effect": "none",
      "speed": 400,
      "size": 8
    }
  },
  "misc": {
    "colors": {
      "segmentStroke": 'black'
    }
  }
});

};